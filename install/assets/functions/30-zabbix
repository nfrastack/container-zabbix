#!/command/with-contenv bash

configure_zabbix_proxy() {
    if [ "${ZABBIX_PROXY_SETUP_TYPE,,}" = "auto" ] ; then
        print_info "Configuring Zabbix Proxy"
        local config_file="${ZABBIX_PROXY_CONFIG_PATH}"/"${ZABBIX_PROXY_CONFIG_FILE}"

        if [ -n "${ZABBIX_PROXY_TLS_PSK_IDENTITY}" ] || [ -n "${ZABBIX_PROXY_TLS_PSK_KEY}" ] || [ -n "${ZABBIX_PROXY_TLS_PSK_FILE}" ] ; then
            print_debug "Zabbix Proxy - Using PSK Encryption"
            if [ -z "${ZABBIX_PROXY_TLS_PSK_FILE}" ] && [ -z "${ZABBIX_PROXY_TLS_PSK_KEY}" ] ; then
                print_error "You've selected Zabbix Proxy PSK Encryption but haven't supplied a file or a Key!"
                exit 1
            fi

            if [ -z "${ZABBIX_PROXY_TLS_PSK_FILE}" ] && [ -n "${ZABBIX_PROXY_TLS_PSK_KEY}" ] ; then
                print_debug "Zabbix Proxy - Only have PSK via ENV Var (Automated creation of file)"
                # openssl rand -hex 32 = 256bit
                ZABBIX_PROXY_TLS_PSK_FILE="${ZABBIX_CERT_PATH}/zabbix_proxy.psk"
                mkdir -p "${ZABBIX_CERT_PATH}"
                echo "${ZABBIX_PROXY_TLS_PSK_KEY}" > "${ZABBIX_CERT_PATH}"/"${ZABBIX_PROXY_TLS_PSK_FILE}"
                chmod -f 0600 "${ZABBIX_CERT_PATH}"/"${ZABBIX_PROXY_TLS_PSK_FILE}"
                chown -f -R "${ZABBIX_USER}" "${ZABBIX_CERT_PATH}"
            fi

            if [ -f "${ZABBIX_PROXY_TLS_PSK_FILE}" ]; then
                chmod -f 0600 "${ZABBIX_PROXY_TLS_PSK_FILE}"
                chown -f -R "${ZABBIX_USER}" "${ZABBIX_CERT_PATH}"
            else
                print_error "ZABBIX_PROXY_TLS_PSK_FILE set but does not exist or inaccessible!"
                exit 1
            fi
            ZABBIX_PROXY_TLS_CONNECT="psk"
            tls_psk=$(cat<<EOF

## TLS PSK Settings
TLSPSKIdentity=${ZABBIX_PROXY_TLS_PSK_IDENTITY}
TLSPSKFile=${ZABBIX_PROXY_TLS_PSK_FILE}

EOF
            )
        fi

        cat <<EOF > "${ZABBIX_PROXY_CONFIG_PATH}"/"${ZABBIX_PROXY_CONFIG_FILE}"
# Custom Generated Zabbix Proxy configuration. If you want to use your own config set 'ZABBIX_PROXY_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

LoadModulePath=/var/lib/zabbix/modules/
DBName=/var/lib/zabbix/zabbix_proxy_db
ExternalScripts=/usr/lib/zabbix/externalscripts
FpingLocation=/usr/sbin/fping
Fping6Location=/usr/sbin/fping6
SSHKeyLocation=/var/lib/zabbix/ssh_keys
SSLCertLocation=/var/lib/zabbix/ssl/certs/
SSLKeyLocation=/var/lib/zabbix/ssl/keys/
SSLCALocation=/var/lib/zabbix/ssl/ssl_ca/
LogFile=${ZABBIX_PROXY_LOG_PATH}/${ZABBIX_PROXY_LOG_FILE}

${tls_psk}
EOF

        write_config_value "${config_file}" "ZABBIX_PROXY_ALLOW_ROOT" "AllowRoot"
        write_config_value "${config_file}" "ZABBIX_PROXY_BUFFER_LOCAL" "ProxyLocalBuffer"
        write_config_value "${config_file}" "ZABBIX_PROXY_BUFFER_OFFLINE" "ProxyOfflineBuffer"
        write_config_value "${config_file}" "ZABBIX_PROXY_CACHE_HISTORY_INDEX_SIZE" "HistoryIndexCacheSize"
        write_config_value "${config_file}" "ZABBIX_PROXY_CACHE_HISTORY_SIZE" "HistoryCacheSize"
        write_config_value "${config_file}" "ZABBIX_PROXY_CACHE_SIZE" "CacheSize"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_CA_FILE" "DBTLSCAFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_CERT_FILE" "DBTLSCertFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_CIPHER" "DBTLSCipher"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_CIPHER13" "DBTLSCipher13"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_CONNECT" "DBTLSConnect"
        write_config_value "${config_file}" "ZABBIX_PROXY_DB_TLS_KEY_FILE" "DBTLSKeyFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_DEBUG_LEVEL" "DebugLevel"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_CONFIG" "ConfigFrequency"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_DATASENDER" "DataSenderFrequency"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_HEARTBEAT" "HeartbeatFrequency"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_HOUSEKEEPING" "HousekeepingFrequency"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_UNAVAILABLE_DELAY" "UnavailableDelay"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_UNREACHABLE" "UnreachablePeriod"
        write_config_value "${config_file}" "ZABBIX_PROXY_FREQUENCY_UNREACHABLE_DELAY" "UnreachableDelay"
        write_config_value "${config_file}" "ZABBIX_PROXY_HOSTNAME" "Hostname"
        write_config_value "${config_file}" "ZABBIX_PROXY_LISTEN_PORT" "ListenPort"
        write_config_value "${config_file}" "ZABBIX_PROXY_LOGFILESIZE" "LogFileSize"
        write_config_value "${config_file}" "ZABBIX_PROXY_LOG_TYPE" "LogType"
        write_config_value "${config_file}" "ZABBIX_PROXY_MODE" "ProxyMode"
        write_config_value "${config_file}" "ZABBIX_PROXY_REMOTECOMMANDS" "EnableRemoteCommands"
        write_config_value "${config_file}" "ZABBIX_PROXY_REMOTECOMMANDS_LOG" "LogRemoteCommands"
        write_config_value "${config_file}" "ZABBIX_PROXY_SERVER" "Server"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_DB_SYNCERS" "StartDBSyncers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_DISCOVERERS" "StartDiscoverers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_PINGERS" "StartPingers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_POLLERS" "StartPollers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_POLLERS_HTTP" "StartHTTPPollers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_POLLERS_IPMI" "StartIPMIPollers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_POLLERS_JAVA" "StartJavaPollers"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_POLLERS_UNREACHABLE" "StartPollersUnreachable"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_PREPROCESSORS" "StartPreprocessors"
        write_config_value "${config_file}" "ZABBIX_PROXY_START_TRAPPERS" "StartTrappers"
        write_config_value "${config_file}" "ZABBIX_PROXY_TIMEOUT" "Timeout"
        write_config_value "${config_file}" "ZABBIX_PROXY_TIMEOUT_TRAPPER" "TrapperTimeout"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_ACCEPT" "TLSAccept"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CONNECT" "TLSConnect"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CA_FILE" "TLSCAFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CERT_FILE" "TLSCertFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_ALL" "TLSCipherAll"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_ALL13" "TLSCipherAll13"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_CERT" "TLSCipherCert"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_CERT13" "TLSCipherCert13"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_PSK" "TLSCipherPSK"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CIPHER_PSK13" "TLSCipherPSK13"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_CRL_FILE" "TLSCRLFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_KEY_FILE" "TLSKeyFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_SERVER_CERT_ISSUER" "TLSServerCertIssuer"
        write_config_value "${config_file}" "ZABBIX_PROXY_TLS_SERVER_CRT_SUBJECT" "TLSServerCertSubject"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT" "Vault"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_DB_PATH" "VaultDBPath"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_PREFIX" "VaultPrefix"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_TLS_CERT_FILE" "VaultTLSCertFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_TLS_KEY_FILE" "VaultTLSKeyFile"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_TOKEN" "VaultToken"
        write_config_value "${config_file}" "ZABBIX_PROXY_VAULT_URL" "VaultURL"
        write_config_value "${config_file}" "ZABBIX_USER" "User"

        echo "Include=${ZABBIX_PROXY_CONFIG_PATH}/${ZABBIX_PROXY_CONFIG_FILE}.d/*.conf" >> "${ZABBIX_PROXY_CONFIG_PATH}"/"${ZABBIX_PROXY_CONFIG_FILE}"
    fi

    if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
        source /assets/defaults/03-monitoring
        cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_zabbix-proxy.conf
# Zabbix Proxy Configuration - Automatically Generated
# Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-zabbix
# Autoregister=zabbixproxy
EOF
        rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/nginx.conf
        rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/php-fpm.conf
        rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit-php_opcache.conf
    fi

    mkdir -p "${ZABBIX_PROXY_LOG_PATH}"
    chown -R "${ZABBIX_USER}" "${ZABBIX_PROXY_LOG_PATH}"
    chown -R "${ZABBIX_USER}" "${ZABBIX_PROXY_CONFIG_PATH}"
    mkdir -p "${ZABBIX_PROXY_CONFIG_PATH}"/"${ZABBIX_PROXY_CONFIG_FILE}".d/
    chown -R "${ZABBIX_USER}" "${ZABBIX_PROXY_CONFIG_PATH}"/"${ZABBIX_PROXY_CONFIG_FILE}".d/
}

configure_zabbix_server() {
    if [ "${ZABBIX_SERVER_SETUP_TYPE,,}" = "auto" ] ; then
        print_info "Configuring Zabbix Server"
        local config_file="${ZABBIX_SERVER_CONFIG_PATH}"/"${ZABBIX_SERVER_CONFIG_FILE}"
        cat <<EOF > "${config_file}"
# Custom Generated Zabbix Server configuration. If you want to use your own config set 'ZABBIX_SERVER_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

ExternalScripts=/usr/lib/zabbix/externalscripts
Fping6Location=/usr/sbin/fping6
FpingLocation=/usr/sbin/fping
LoadModulePath=/var/lib/zabbix/modules/
SSHKeyLocation=/var/lib/zabbix/ssh_keys
SSLCALocation=/var/lib/zabbix/ssl/ssl_ca/
SSLCertLocation=/var/lib/zabbix/ssl/certs/
SSLKeyLocation=/var/lib/zabbix/ssl/keys/
LogFile=${ZABBIX_SERVER_LOG_PATH}/${ZABBIX_SERVER_LOG_FILE}

EOF

write_config_value "${config_file}" "DB_HOST" "DBHost"
write_config_value "${config_file}" "DB_NAME" "DBName"
write_config_value "${config_file}" "DB_PASS" "DBPassword"
write_config_value "${config_file}" "DB_PORT" "DBPort"
write_config_value "${config_file}" "DB_SCHEMA" "DBSchema"
write_config_value "${config_file}" "DB_USER" "DBUser"
write_config_value "${config_file}" "ZABBIX_SERVER_ALLOW_UNSUPPORTED_DB" "AllowUnsupportedDBVersions"
write_config_value "${config_file}" "ZABBIX_SERVER_ALLOW_ROOT" "AllowRoot"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_SIZE" "CacheSize"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_UPDATE_FREQUENCY" "CacheUpdateFrequency"
write_config_value "${config_file}" "ZABBIX_SERVER_DEBUG_LEVEL" "DebugLevel"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_HISTORY_SIZE" "HistoryCacheSize"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_HISTORY_INDEX_SIZE" "HistoryIndexCacheSize"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_HOUSEKEEPING" "HousekeepingFrequency"
write_config_value "${config_file}" "ZABBIX_SERVER_LISTEN_PORT" "ListenPort"
write_config_value "${config_file}" "ZABBIX_SERVER_LOGFILESIZE" "LogFileSize"
write_config_value "${config_file}" "ZABBIX_SERVER_LOG_TYPE" "LogType"
write_config_value "${config_file}" "ZABBIX_SERVER_MAX_HOUSEKEEPING_DELETE" "MaxHousekeeperDelete"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_PROXY_CONFIG" "ProxyConfigFrequency"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_PROXY_DATA" "ProxyDataFrequency"
write_config_value "${config_file}" "ZABBIX_SERVER_START_ALERTERS" "StartAlerters"
write_config_value "${config_file}" "ZABBIX_SERVER_START_DB_SYNCERS" "StartDBSyncers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_DISCOVERERS" "StartDiscoverers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_ESCALATORS" "StartEscalators"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS_HTTP" "StartHTTPPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS_HISTORY" "StartHistoryPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS_IPMI" "StartIPMIPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS_JAVA" "StartJavaPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_LLD_PROCESSORS" "StartLLDProcessors"
write_config_value "${config_file}" "ZABBIX_SERVER_START_PINGERS" "StartPingers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS" "StartPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_POLLERS_UNREACHABLE" "StartPollersUnreachable"
write_config_value "${config_file}" "ZABBIX_SERVER_START_PREPROCESSORS" "StartPreprocessors"
write_config_value "${config_file}" "ZABBIX_SERVER_START_PROXY_POLLERS" "StartProxyPollers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_REPORT_WRITERS" "StartReportWriters"
write_config_value "${config_file}" "ZABBIX_SERVER_START_SNMPTRAPPER" "StartSNMPTrapper"
write_config_value "${config_file}" "ZABBIX_SERVER_START_TIMERS" "StartTimers"
write_config_value "${config_file}" "ZABBIX_SERVER_START_TRAPPERS" "StartTrappers"
write_config_value "${config_file}" "ZABBIX_SERVER_TIMEOUT" "Timeout"
write_config_value "${config_file}" "ZABBIX_SERVER_TIMEOUT_TRAPPER" "TrapperTimeout"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_TREND_FUNCTION_SIZE" "TrendFunctionCacheSize"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_UNAVAILABLE_DELAY" "UnavailableDelay"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_UNREACHABLE_DELAY" "UnreachableDelay"
write_config_value "${config_file}" "ZABBIX_SERVER_FREQUENCY_UNREACHABLE" "UnreachablePeriod"
write_config_value "${config_file}" "ZABBIX_SERVER_CACHE_VALUE_SIZE" "ValueCacheSize"
write_config_value "${config_file}" "ZABBIX_SERVER_WEBSERVICE_URL" "WebServiceURL"

echo "Include=${ZABBIX_SERVER_CONFIG_PATH}/${ZABBIX_SERVER_CONFIG_FILE}.d/*.conf" >> "${config_file}"
    fi

        if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
            source /assets/defaults/03-monitoring
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_zabbix-server.conf
# Zabbix Server Configuration - Automatically Generated
# Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-zabbix
# Autoregister=zabbixserver
EOF
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/nginx.conf
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/php-fpm.conf
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit-php_opcache.conf
        fi

        mkdir -p "${ZABBIX_SERVER_LOG_PATH}"
        chown -R "${ZABBIX_USER}" "${ZABBIX_SERVER_LOG_PATH}"
        chown -R "${ZABBIX_USER}" "${ZABBIX_SERVER_CONFIG_PATH}"
        mkdir -p "${ZABBIX_SERVER_CONFIG_PATH}"/"${ZABBIX_SERVER_CONFIG_FILE}".d/
        chown -R "${ZABBIX_USER}" "${ZABBIX_SERVER_CONFIG_PATH}"/"${ZABBIX_SERVER_CONFIG_FILE}".d/
}

configure_zabbix_webservice() {
    if [ "${ZABBIX_WEBSERVICE_SETUP_TYPE,,}" = "auto" ] ; then
        print_info "Configuring Zabbix Webservice"
         local config_file="${ZABBIX_WEBSERVICE_CONFIG_PATH}"/"${ZABBIX_WEBSERVICE_CONFIG_FILE}"
        cat <<EOF > "${config_file}"
# Custom Generated Zabbix Webservice configuration. If you want to use your own config set 'ZABBIX_WEBSERVICE_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

LogFile=${ZABBIX_WEBSERVICE_LOG_PATH}/${ZABBIX_WEBSERVICE_LOG_FILE}
EOF

        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_ALLOWED_IPS" "AllowedIP"
        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_DEBUG_LEVEL" "DebugLevel"
        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_LISTEN_PORT" "ListenPort"
        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_LOGFILESIZE" "LogFileSize"
        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_LOG_TYPE" "LogType"
        write_config_value "${config_file}" "ZABBIX_WEBSERVICE_TIMEOUT" "Timeout"

        if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
            source /assets/defaults/03-monitoring
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_zabbix-webservice.conf
# Zabbix Webservice Configuration - Automatically Generated
# Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-zabbix
# Autoregister=zabbixwebservice
EOF
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/nginx.conf
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/php-fpm.conf
            rm -rf "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit-php_opcache.conf

        fi

        mkdir -p "${ZABBIX_WEBSERVICE_LOG_PATH}"
        chown -R "${ZABBIX_USER}" "${ZABBIX_WEBSERVICE_LOG_PATH}"
        chown -R "${ZABBIX_USER}" "${ZABBIX_WEBSERVICE_CONFIG_PATH}"
        mkdir -p "${ZABBIX_WEBSERVICE_CONFIG_PATH}"/"${ZABBIX_WEBSERVICE_CONFIG_FILE}".d/
        chown -R "${ZABBIX_USER}" "${ZABBIX_WEBSERVICE_CONFIG_PATH}"/"${ZABBIX_WEBSERVICE_CONFIG_FILE}".d/
    fi
}

configure_zabbix_web_frontend() {
    if var_true "${DB_UPGRADED}" ; then
        db_ieee754="\$DB['DOUBLE_IEEE754'] = 'true';"
    else
        db_ieee754="\$DB['DOUBLE_IEEE754'] = 'false';"
    fi

    if [ -n "${SSO_SETTINGS}" ] ; then
        sso_settings="\$SSO['SETTINGS'] = [ ${SSO_SETTINGS} ];"
    fi
    cat <<EOF > "${NGINX_WEBROOT}"/conf/zabbix.conf.php
<?php
// Zabbix GUI configuration file.
global \$DB;

\$DB['TYPE']        = 'POSTGRESQL';
\$DB['SERVER']      = '${DB_HOST}';
\$DB['PORT']        = '${DB_PORT}';
\$DB['DATABASE']    = '${DB_NAME}';
\$DB['USER']        = '${DB_USER}';
\$DB['PASSWORD']    = '${DB_PASS}';
\$DB['SCHEMA']      = '${DB_SCHEMA}';
${db_ieee754}
\$ZBX_SERVER   		= '${ZABBIX_SERVER_HOST}';
\$ZBX_SERVER_PORT 	= '${ZABBIX_SERVER_PORT}';
\$ZBX_SERVER_NAME 	= '${ZABBIX_SERVER_NAME}';

\$IMAGE_FORMAT_DEFAULT	= IMAGE_FORMAT_PNG;
${sso_settings}
EOF
}

configure_alert_scripts() {
    if dir_notempty "/assets/alertscripts" ; then
        silent cp -f -R /assets/alertscripts/* /usr/lib/zabbix/alertscripts
    fi

    chown -R "${ZABBIX_USER}" /usr/lib/zabbix/alertscripts
    chmod -R 0755 /usr/lib/zabbix/alertscripts
}

configure_external_scripts() {
    if dir_notempty "/assets/externalscripts" ; then
        silent cp -f -R /assets/externalscripts/* /usr/lib/zabbix/externalscripts
    fi

    chown -R "${ZABBIX_USER}" /usr/lib/zabbix/externalscripts
    chmod -R 0755 /usr/lib/zabbix/externalscripts
}

db_bootstrap() {
    if [ -n "${DB_PASS}" ]; then
        export PGPASSWORD="${DB_PASS}"
    fi

    dbversion_table=$(psql -A -q -t -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" -c "SELECT 1 FROM pg_catalog.pg_class c JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE  n.nspname = '${DB_SCHEMA}' AND c.relname = 'dbversion'" "${DB_NAME}" 2>/dev/null)


    if [ -n "${dbversion_table}" ]; then
        print_debug "Table '${DB_NAME}.dbversion' already exists."
        db_version=$(psql -A -q -t -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" -c "SELECT mandatory FROM ${DB_SCHEMA}.dbversion" "${DB_NAME}")
    fi

    if [ -z "${db_version}" ]; then
        print_warn "Creating '${DB_NAME}' schema in PostgreSQL"
        cat /usr/share/doc/zabbix-server/sql/postgresql/schema.sql | psql -q -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" "${DB_NAME}" 1>/dev/null
        print_debug "Fill the schema with initial data"
        cat /usr/share/doc/zabbix-server/sql/postgresql/images.sql | psql -q -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" "${DB_NAME}" 1>/dev/null
        cat /usr/share/doc/zabbix-server/sql/postgresql/data.sql | psql -q -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" "${DB_NAME}" 1>/dev/null
    fi

    unset PGPASSWORD
}

write_config_value() {
    local config_file="$1"
    local env_var_name="$2"
    local config_key="$3"

    if [ -n "${!env_var_name}" ]; then
        echo "${config_key}=${!env_var_name}" >> "${config_file}"
    fi
}